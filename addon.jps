type: update 
name: VAP Installer 
id: vap-installer-addon 
targetEditions: any 
logo: https://raw.githubusercontent.com/vlobzakov/images/main/logo-small.png
description: VAP installer 
baseUrl: https://raw.githubusercontent.com/vlobzakov/vap-installer/main

targetNodes:
  nodeType:
    - apache-python

globals:
  vap_settings: /var/www/webroot/.vapenv
  openstack: /opt/jelastic-python311/bin/openstack

settings: 
  configure:
    submitUnchanged: true
    fields: 
      - type: string 
        name: vhi_proj_name 
        caption: VHI Project Name 
        tooltip: "<span>Specify project name you will use to create VMs in</span>"
        value: cmp
      - type: string 
        name: vhi_username 
        caption: Username 
        tooltip: "<span>Specify OS project username you will use to create VMs</span>"
        
      - type: string
        inputType: password
        name: vhi_password 
        caption: Password 
        tooltip: "<span>Specify OS project username's password you will use to create VMs</span>"
        
      - type: string 
        name: vhi_url 
        caption: VHI URL 
        tooltip: "<span>Specify VHI cluster URL where you are authenticated</span>"
        
      - type: string 
        name: vap_stack_name 
        caption: VAP Stack Name 
        tooltip: "<span>VAP Stack Name</span>"

  create:
    fields: []
    onBeforeInit: |
      var subnetList = jelastic.env.control.ExecCmdById('${env.envName}', session, '${nodes.cp.master.id}', toJSON([{ command: 'source .vapenv && /opt/jelastic-python311/bin/openstack subnet list -f json' }]), true).responses[0].out;
      var flavorList = jelastic.env.control.ExecCmdById('${env.envName}', session, '${nodes.cp.master.id}', toJSON([{ command: 'source .vapenv && /opt/jelastic-python311/bin/openstack flavor list -f json' }]), true).responses[0].out;
      var vapStackName = jelastic.env.control.ExecCmdById('${env.envName}', session, '${nodes.cp.master.id}', toJSON([{ command: 'source .vapenv && echo $VAP_STACK_NAME' }]), true).responses[0].out;      
      var subnetListPrepared = prepareSubnets(JSON.parse(subnetList));
      var flavorListPrepared = prepareFlavors(JSON.parse(flavorList));
      
      function prepareSubnets(values) {
        var aResultValues = [];
        values = values || [];
        for (var i = 0, n = values.length; i < n; i++) {
          aResultValues.push({
            caption: values[i].Subnet,
            value: values[i].Name
          });
        }
        return aResultValues;
      }

      function prepareFlavors(values) {
        var aResultValues = [];
        values = values || [];
        for (var i = 0, n = values.length; i < n; i++) {
          aResultValues.push({
            caption: values[i].RAM +" Mb "+ values[i].VCPUs +" VCPUs ",
            value: values[i].Name
          });
        }
        return aResultValues;
      }

      settings.fields.push({
        "caption": "VAP Stack Name",
        "type": "string",
        "tooltip": "VAP Stack Name",          
        "name": "vap_stack_name",
        "required": true,
        "value": vapStackName
      }, {
        "caption": "RAM&CPU Infra",
        "type": "list",
        "tooltip": {
          "text": "<h3>Hardware Requirements for Infra</h3>Make sure the Flavor fits requirements outlined by Red for required installtion type.<a href='https://www.virtuozzo.com/application-platform-ops-docs/hardware-requirements-local-storage/'>Learn More</a><p></p> <img width='800' height='250' src='https://raw.githubusercontent.com/sych74/vap-installer/main/images/hw-requirements-INFRA.png'>",
          "tipParams": null,
          "maxWidth": 830,
          "minWidth": 300
      },
        "name": "infra_cpu_ram",
        "required": true,
        "values": flavorListPrepared
      }, {
        "caption": "RAM&CPU User",
        "type": "list",
        "tooltip": {
          "text": "<h3>Hardware Requirements for User Nodes</h3>Make sure the Flavor fits requirements outlined by Red for required installtion type.<a href='https://www.virtuozzo.com/application-platform-ops-docs/hardware-requirements-local-storage/'>Learn More</a><p></p> <img width='800' height='250' src='https://raw.githubusercontent.com/sych74/vap-installer/main/images/hw-requirements-USER.png'>",
          "tipParams": null,
          "maxWidth": 830,
          "minWidth": 300
      },
        "name": "user_cpu_ram",
        "required": true,
        "values": flavorListPrepared
      }, {
        "caption": "User Node Count",
        "type": "spinner",
        "tooltip": "User Node Count",          
        "name": "user_node_count",
        "min": 1,
        "max": 5
      }, {
        "caption": "VHI Cluster Subnet",
        "type": "list",
        "tooltip": "Select required VHI cluster subnet",          
        "name": "subnet",
        "required": true,
        "values": subnetListPrepared
      }, {
        "caption": "VAP Image Name",
        "type": "string",
        "tooltip": "Select required qcow2 VAP image name",          
        "name": "image_name",
        "required": true,
        "value": "vap-82-2_20230301234215"
      })

      return settings;

buttons:
- caption: Configure
  action: configure
  settings: configure
  title: Configure detail
  loadingText: Configuring...
  submitButtonText: Configure
  successText: Configured successfully.
  
- caption: New VAP
  action: create
  loadingText: Creating VAP...
  settings: create
  successText: The VAP have been successfully created.
  title: New VAP
  submitButtonText: New VAP
  confirmText: New VAP?

onInstall: 
  - installOSclient
  - getProjectsConf

actions:
  configure:
    - addVAPconfigureSettings
    - validateOS

  getProjectsConf:
    cmd[cp]: |-
      wget ${baseUrl}/configs/VAP.yaml -O /var/www/webroot/VAP.yaml;
      wget ${baseUrl}/configs/VAP_user.yaml -O /var/www/webroot/VAP_user.yaml;
      wget ${baseUrl}/configs/infra.sh -O /var/www/webroot/infra.sh;
      wget ${baseUrl}/configs/project.sh -O /var/www/webroot/project.sh;
      wget ${baseUrl}/configs/user.sh -O /var/www/webroot/user.sh;

  addVAPconfigureSettings:
    cmd[cp]: |-
      grep -q OS_PROJECT_DOMAIN_NAME ${globals.vap_settings} && { sed -i "s/OS_PROJECT_DOMAIN_NAME.*/OS_PROJECT_DOMAIN_NAME=${settings.vhi_proj_name}/" ${globals.vap_settings}; } || { echo "export OS_PROJECT_DOMAIN_NAME=${settings.vhi_proj_name}" >> ${globals.vap_settings}; }
      grep -q OS_USER_DOMAIN_NAME ${globals.vap_settings} && { sed -i "s/OS_USER_DOMAIN_NAME.*/OS_USER_DOMAIN_NAME=${settings.vhi_proj_name}/" ${globals.vap_settings}; } || { echo "export OS_USER_DOMAIN_NAME=${settings.vhi_proj_name}" >> ${globals.vap_settings}; }
      grep -q OS_PROJECT_NAME ${globals.vap_settings} && { sed -i "s/OS_PROJECT_NAME.*/OS_PROJECT_NAME=${settings.vhi_proj_name}/" ${globals.vap_settings}; } || { echo "export OS_PROJECT_NAME=${settings.vhi_proj_name}" >> ${globals.vap_settings}; }
      grep -q OS_USERNAME ${globals.vap_settings} && { sed -i "s/OS_USERNAME.*/OS_USERNAME=${settings.vhi_username}/" ${globals.vap_settings}; } || { echo "export OS_USERNAME=${settings.vhi_username}" >> ${globals.vap_settings}; }
      grep -q OS_PASSWORD ${globals.vap_settings} && { sed -i "s/OS_PASSWORD.*/OS_PASSWORD=${settings.vhi_password}/" ${globals.vap_settings}; } || { echo "export OS_PASSWORD=${settings.vhi_password}" >> ${globals.vap_settings}; }
      grep -q OS_AUTH_URL ${globals.vap_settings} && { sed -i "s/OS_AUTH_URL.*/OS_AUTH_URL=${settings.vhi_url}/" ${globals.vap_settings}; } || { echo "export OS_AUTH_URL=${settings.vhi_url}" >> ${globals.vap_settings}; }
      grep -q OS_IDENTITY_API_VERSION ${globals.vap_settings} && { sed -i "s/OS_IDENTITY_API_VERSION.*/OS_IDENTITY_API_VERSION=3/" ${globals.vap_settings}; } || { echo "export OS_IDENTITY_API_VERSION=3" >> ${globals.vap_settings}; }
      grep -q OS_AUTH_TYPE ${globals.vap_settings} && { sed -i "s/OS_AUTH_TYPE.*/OS_AUTH_TYPE=password/" ${globals.vap_settings}; } || { echo "export OS_AUTH_TYPE=password" >> ${globals.vap_settings}; }
      grep -q OS_INSECURE ${globals.vap_settings} && { sed -i "s/OS_INSECURE.*/OS_INSECURE=true/" ${globals.vap_settings}; } || { echo "export OS_INSECURE=true" >> ${globals.vap_settings}; }
      grep -q NOVACLIENT_INSECURE ${globals.vap_settings} && { sed -i "s/NOVACLIENT_INSECURE.*/NOVACLIENT_INSECURE=true/" ${globals.vap_settings}; } || { echo "export NOVACLIENT_INSECURE=true" >> ${globals.vap_settings}; }
      grep -q NEUTRONCLIENT_INSECURE ${globals.vap_settings} && { sed -i "s/NEUTRONCLIENT_INSECURE.*/NEUTRONCLIENT_INSECURE=true/" ${globals.vap_settings}; } || { echo "export NEUTRONCLIENT_INSECURE=true" >> ${globals.vap_settings}; }
      grep -q CINDERCLIENT_INSECURE ${globals.vap_settings} && { sed -i "s/CINDERCLIENT_INSECURE.*/CINDERCLIENT_INSECURE=true/" ${globals.vap_settings}; } || { echo "export CINDERCLIENT_INSECURE=true" >> ${globals.vap_settings}; }
      grep -q OS_PLACEMENT_API_VERSION ${globals.vap_settings} && { sed -i "s/OS_PLACEMENT_API_VERSION.*/OS_PLACEMENT_API_VERSION=1.22/" ${globals.vap_settings}; } || { echo "export OS_PLACEMENT_API_VERSION=1.22" >> ${globals.vap_settings}; }
      grep -q VAP_STACK_NAME ${globals.vap_settings} && { sed -i "s/VAP_STACK_NAME.*/VAP_STACK_NAME=${settings.vap_stack_name}/" ${globals.vap_settings}; } || { echo "export VAP_STACK_NAME=${settings.vap_stack_name}" >> ${globals.vap_settings}; }

  validateOS:
    script: |
        var command = "source ${globals.vap_settings} && ${globals.openstack} stack list -f json";
        resp = api.env.control.ExecCmdById('${env.envName}', session, '${nodes.cp.master.id}', toJSON([{ "command": command }]), true);
        if (resp.result != 0) return resp;
        try {
          projectList = JSON.parse(resp.responses[0].out) || [];
        } catch (ex) {
          return { type: "error", message: "cannot parse project list: " + ex }
        }
        return { result: 0, projectList: projectList};

  installOSclient: 
    - cmd[cp]: |- 
        pip install python-openstackclient
        pip install python-heatclient

  create:
    - log: VAP Stack Name - ${settings.vap_stack_name}
    - log: RAM&CPU Infra - ${settings.infra_cpu_ram}
    - log: RAM&CPU User - ${settings.user_cpu_ram}
    - log: User Node Count - ${settings.user_node_count}
    - log: Subnet - ${settings.subnet}
    - log: Image Name - ${settings.image_name}
    - test

  test: 
    - cmd[cp]: |-
        source ${globals.vap_settings} && ${globals.openstack} stack create ${settings.vap_stack_name} -t VAP.yaml \
        --parameter "image=${settings.image_name}" \
        --parameter "user_hosts_count=${settings.user_node_count}" \
        --parameter "public_network=public" \
        --parameter "public_subnet=${settings.subnet}" \
        --parameter "infra_flavor=${settings.infra_cpu_ram}" \
        --parameter "user_flavor=${settings.user_cpu_ram}" \
        --parameter "infra_root_volume_size=100" \
        --parameter "user_root_volume_size=100" \
        --parameter "infra_vz_volume_size=400" \
        --parameter "user_vz_volume_size=800" \
        --parameter "infra_swap_volume_size=8" \
        --parameter "user_swap_volume_size=8" \
        --parameter "key_name=vap-installer-demo" \
        --wait
       
