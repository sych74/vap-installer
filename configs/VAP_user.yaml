heat_template_version: 2013-05-23
description: >
    Template to deploy a VAP cluster

parameters:

  name:
    type: string

  image:
    type: string

  flavor:
    type: string

  private_network:
    type: string
    
  private_user_ip:
    type: string

  public_network:
    type: string

  resolver_ip:
    type: string

  hosts_token:
    type: string

  key_name:
    type: string

  storage_policy_root:
    type: string

  storage_policy_user_vz:
    type: string
  
  user_root_volume_size:
    type: number

  user_vz_volume_size:
    type: number
    
  user_swap_volume_size:
    type: number

resources:

  port_public:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: public_network }

  port_private:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_network }
      port_security_enabled: off
      fixed_ips:
        - ip_address: { get_param: private_user_ip }

  volume_swap:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: user_swap_volume_size }
      volume_type: { get_param: storage_policy_root }

  server:
    type: OS::Nova::Server
    properties:
      name: { get_param: name }
      flavor: { get_param: flavor }
      config_drive: true
      block_device_mapping_v2:
        - boot_index: 0
          image: { get_param: image }
          volume_size:  { get_param: user_root_volume_size }
          volume_type: { get_param: storage_policy_root }
          delete_on_termination: true
        - boot_index: 1
          volume_id: { get_resource: volume_swap }
          delete_on_termination: true
        - boot_index: 2
          image: { get_param: image }
          volume_size:  { get_param: user_vz_volume_size }
          volume_type: { get_param: storage_policy_user_vz }
          delete_on_termination: true
      networks:
        - port: { get_resource: port_public }
        - port: { get_resource: port_private }
      key_name: { get_param: key_name }
      user_data:
        str_replace:
          template: {get_file: user.sh}
          params:
              $resolver_ip: { get_param: resolver_ip }
              $hosts_token: { get_param: hosts_token }
              $private_ip: { get_attr: [port_private, fixed_ips, 0, ip_address] }
              $public_ip: { get_attr: [port_public, fixed_ips, 0, ip_address] }

outputs:
  user_public_ip:
    description: public ip of slave VM
    value:
      get_attr: [port_public, fixed_ips, 0, ip_address]
